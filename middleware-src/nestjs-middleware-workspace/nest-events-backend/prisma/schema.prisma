// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../SB_ERD.pdf"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId               Int                    @id @default(autoincrement())
  emailId              String                 @unique
  firstName            String?
  lastName             String?
  StackBoardMembership StackBoardMembership[]
  StackBoard           StackBoard[]
  Questions            Questions[]
  Answers              Answers[]
}

model StackExchange {
  stackExchangeId Int          @id @default(autoincrement())
  title           String
  description     String?
  published       Boolean?     @default(false)
  //author    User?    @relation(fields: [authorId], references: [id])
  //authorId  Int?
  StackBoard      StackBoard[]
}

model StackBoard {
  stackBoardId         Int                    @id @default(autoincrement())
  title                String
  description          String?
  createdBy            User?                  @relation(fields: [createdByUserId], references: [userId])
  createdByUserId      Int?
  Questions            Questions[]
  StackBoardMembership StackBoardMembership[]
  StackExchange        StackExchange?         @relation(fields: [stackExchangeId], references: [stackExchangeId])
  stackExchangeId      Int?
}

model StackBoardMembership {
  stackBoardMembershipId Int        @id @default(autoincrement())
  memberRole             String
  member                 User?      @relation(fields: [userId], references: [userId])
  userId                 Int?
  StackBoard             StackBoard @relation(fields: [stackBoardId], references: [stackBoardId])
  stackBoardId           Int
}

model Questions {
  questionId          Int         @id @default(autoincrement())
  questionTitle       String?
  questionDescription String?
  upVote              Int
  downVote            Int
  questionStatus      String
  answers             Answers[]
  stackBoardId        Int?
  StackBoard          StackBoard? @relation(fields: [stackBoardId], references: [stackBoardId])
  User                User?       @relation(fields: [userId], references: [userId])
  userId              Int?
}

model Answers {
  answerId          Int     @id @default(autoincrement())
  answerDescription String?
  threadEntryType   String //this will be either a question or an answer
  parentThreadId    Int

  Questions   Questions? @relation(fields: [questionsId], references: [questionId])
  questionsId Int?
  User        User?      @relation(fields: [userId], references: [userId])
  userId      Int?
}
